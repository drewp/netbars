#!/usr/bin/python

import cyclone.web, cyclone.sse
from twisted.internet import reactor, task
import json
import pkg_resources
from netbars.traffic import RecentActivity
import docopt
args = docopt.docopt('''
Usage: netbars [options]

--port=PORT     HTTP server port [default: 3001]
--iface=IF      Network interface to watch
--local=IPADDR  Address of our host on the network
''')


class PushActivity(object):
    def __init__(self, recent):
        self.recent = recent
        self.requests = []
        self.lastSent = None, None # body, nRequests
        task.LoopingCall(self.update).start(1)
        
    def addListener(self, req):
        self.requests.append(req)

    def removeListener(self, req):
        self.requests.remove(req)

    def update(self):
        body = self.recent.recent(n=5, byteThreshold=5000)
        approxBody = {'tops': [(name, nBytes // 5000)
                               for name, nBytes in body['tops']],
                      'bytes': body['bytes'] // 5000}
        if (approxBody, len(self.requests)) == self.lastSent:
            return
        bodyJson = json.dumps(body)
        #print body, len(bodyJson)
        for f in self.requests:
            f.sendEvent(message=bodyJson)
        self.lastSent = approxBody, len(self.requests)
    
class root(cyclone.web.RequestHandler):
    def get(self):
        self.set_header('Content-type', 'text/html')
        self.write(pkg_resources.resource_stream('netbars', "bars.html").read())

class recentPage(cyclone.sse.SSEHandler):
    """
    A stream of updates of hosts with the most traffic to+from our local host.
    """
    def _execute(self, transforms, *args, **kwargs):
        # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering
        self.set_header('X-Accel-Buffering', 'no')
        cyclone.sse.SSEHandler._execute(self, transforms, *args, **kwargs)
        
    def bind(self):
        self.settings.pusher.addListener(self)
        
    def unbind(self):
        self.settings.pusher.removeListener(self)

class traffic(cyclone.web.RequestHandler):
    def get(self):
        """
        gets the [bytes_in, bytes_out] per second, averaged over the
        last 5 seconds
        """
        self.set_header('Content-type', 'application/json')
        self.write(json.dumps(self.settings.recent.traffic()))

def main():
    recent = RecentActivity(localSide=args['--local'], iface=args['--iface'])

    app = cyclone.web.Application([
        (r"/", root),
        (r"/recent", recentPage),
        (r"/traffic", traffic),
        ], recent=recent, pusher=PushActivity(recent))
    reactor.listenTCP(int(args['--port']), app, interface='::')
    reactor.run()

main()


